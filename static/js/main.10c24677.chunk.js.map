{"version":3,"sources":["cardlist/cardlist-style.module.scss","card/card-style.module.scss","serchbox/searchbox-style.module.scss","card/Card-Component.jsx","cardlist/CardList-component.jsx","serchbox/SearchBox-Component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","card__container","card","searchbox","Card","_ref","name","avatar","email","react_default","a","createElement","Fragment","className","styles","src","alt","CardList","users","map","user","Card_Component","key","id","toString","SearchBox","placeholder","onChangeHandeler","type","onChange","App","state","monsters","filter","handelChange","e","_this","setState","target","value","_this2","this","fetch","then","response","json","_this$state","userFiltred","toLowerCase","includes","SearchBox_Component","CardList_component","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+EACAA,EAAAC,QAAA,CAAkBC,gBAAA,0DCAlBF,EAAAC,QAAA,CAAkBE,KAAA,2CCAlBH,EAAAC,QAAA,CAAkBG,UAAA,6QCcHC,EAXH,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,KAAMC,EAARF,EAAQE,OAAQC,EAAhBH,EAAgBG,MAAhB,OACTC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACCH,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOZ,MACnBO,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,OAAKI,IAAKR,EAAQS,IAAKV,IACvBG,EAAAC,EAAAC,cAAA,SAAIH,MCIGS,EATE,SAAAZ,GAAA,IAAEa,EAAFb,EAAEa,MAAF,OACbT,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOb,iBACnBiB,EAAMC,IAAI,SAAAC,GAAI,OACXX,EAAAC,EAAAC,cAACU,EAAD,CAAOC,IAAKF,EAAKG,GAAGC,WAAYlB,KAAMc,EAAKd,KAAMC,OAAQa,EAAKb,OAAQC,MAAOY,EAAKZ,4BCM9EiB,EATG,SAAApB,GAAA,IAAEqB,EAAFrB,EAAEqB,YAAaC,EAAftB,EAAesB,iBAAf,OAEdlB,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOX,WACpBM,EAAAC,EAAAC,cAAA,SAAOiB,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCiCjDG,6MAjCbC,MAAQ,CACNC,SAAU,GACVC,OAAO,MAWTC,aAAc,SAACC,GACVC,EAAKC,SAAS,CAACJ,OAASE,EAAEG,OAAOC,4FARlB,IAAAC,EAAAC,KAClBC,MAAM,oCACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAzB,GAAK,OAAIsB,EAAKH,SAAS,CAAEL,SAAUd,uCASpC,IAAA4B,EACqBL,KAAKV,MAA1BC,EADAc,EACAd,SAAWC,EADXa,EACWb,OACZc,EAAcf,EAASC,OAAO,SAAAb,GAAI,OACtCA,EAAKd,KAAK0C,cAAcC,SAAShB,EAAOe,iBAG1C,OACEvC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACuC,EAAD,CAAWvB,iBAAkBc,KAAKP,aAAcR,YAAY,eAC5DjB,EAAAC,EAAAC,cAACwC,EAAD,CAAUjC,MAAO6B,YA7BPK,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.10c24677.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card__container\":\"cardlist-style_card__container__2ciqH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card-style_card__1FmQc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbox\":\"searchbox-style_searchbox__2baWA\"};","import React from 'react'\nimport  styles from \"./card-style.module.scss\"\n\n\nconst Card =({name ,avatar ,email}) =>(\n   <>\n    <div className={styles.card}>\n        <h6>{name}</h6>\n        <img src={avatar} alt={name} />\n        <p>{email}</p>\n    </div>\n   </>\n)\n\n\nexport default Card;","import React from 'react'\nimport styles from './cardlist-style.module.scss';\nimport Card from '../card/Card-Component';\n\nconst CardList = ({users}) => (\n    <div className={styles.card__container}>\n       {users.map(user =>(\n           <Card  key={user.id.toString()} name={user.name} avatar={user.avatar} email={user.email} />\n       ))}\n    </div>\n)\n\n\nexport default CardList;","import React from 'react'\nimport  styles  from './searchbox-style.module.scss';\n\n\nconst SearchBox = ({placeholder ,onChangeHandeler}) => (\n\n    <div className={styles.searchbox}>\n       <input type=\"search\" placeholder={placeholder} onChange={onChangeHandeler}/>\n    </div>\n)\n\n\n\nexport default SearchBox;","import React from 'react';\nimport './App.css';\nimport CardList from './cardlist/CardList-component'\nimport SearchBox from './serchbox/SearchBox-Component';\n\nclass App extends React.Component {\n\n  state = {\n    monsters: [],\n    filter:''\n  }\n\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.ir/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }))\n\n  }\n\n  handelChange =(e) => {\n       this.setState({filter : e.target.value})\n  }\n\n\n  render() {\n    const {monsters , filter} = this.state;\n    const userFiltred = monsters.filter(user =>\n      user.name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n    return (\n      <>\n        <SearchBox onChangeHandeler={this.handelChange} placeholder=\"search ...\"/>\n        <CardList users={userFiltred} />\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}